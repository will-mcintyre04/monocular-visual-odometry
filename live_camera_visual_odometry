import os
import numpy as np
import cv2


from tqdm import tqdm
import time

from matplotlib import pyplot as plt

import pytransform3d.transformations as pt
import pytransform3d.trajectories as ptr
import pytransform3d.rotations as pr
import pytransform3d.camera as pc

import pickle

from cycler import cycle

class CameraPoses():

    def __init__(self,intrinsic):
        self.K = intrinsic
        self.extrinsic = np.array(((1,0,0,0), (0,1,0,0), (0,0,1,0)))
        self.P = self.K @ self.extrinsic
        self.orb = cv2.ORB_create(3000)
        FLANN_INDEX_LSH = 6
        index_params = dict(algorithm=FLANN_INDEX_LSH, table_number=6, key_size=12, multi_probe_level=1)
        search_params = dict(checks=50)
        self.flann = cv2.FlannBasedMatcher(indexParams=index_params, searchParams=search_params)

        self.world_points = []
        self.current_pose = None
    
    @staticmethod
    def _load_images(filepath):
        """
        Loads the images

        Parameters
        ----------
        filepath (str): The file path to image dir

        Returns
        -------
        images (list): grayscale images
        """
        image_paths = [os.path.join(filepath, file) for file in sorted(os.listdir(filepath))]
        return [cv2.imread(path, cv2.IMREAD_GRAYSCALE) for path in image_paths]
    
    @staticmethod
    def _form_transf(R, t):
        """
        Makes a transformation matrix from the given rotation matrix and translation vector

        Parameters
        ----------
        R (ndarray): The rotation matrix
        t (list): The translation vector

        Returns
        -------
        T (ndarray): The transformation matrix
        """
        T = np.eye(4, dtype=np.float64)
        T[:3, :3] = R
        T[:3, 3] = t
        return T
    
    def get_world_points(self):
        return np.array(self.world_points)
    
    def get_matches(self, img1, img2, visualize=False):
        """
        This function detect and compute keypoints and descriptors from consecutive frames
        """
        keypoints1, descriptors1 = self.orb.detectAndCompute(img1, None)
        keypoints2, descriptors2 = self.orb.detectAndCompute(img2, None)

        if descriptors1 is None or descriptors2 is None:
            return None, None

        if len(keypoints1) > 6 and len(keypoints2) > 6:
            # Sometimes knnMatch fails to find 2 matches for all query points
            # Need to handle this properly
            matches = self.flann.knnMatch(descriptors1, descriptors2, k=2)
            
            good = []
            # Filter only valid matches that have 2 neighbors
            for match in matches:
                if len(match) == 2:  # Only process matches with 2 neighbors
                    m, n = match
                    if m.distance < 0.5*n.distance:
                        good.append(m)

            # Check if we have enough good matches
            if len(good) > 0:
                q1 = np.float32([keypoints1[m.queryIdx].pt for m in good])
                q2 = np.float32([keypoints2[m.trainIdx].pt for m in good])

                if visualize and len(good) > 0:
                    draw_params = dict(matchColor = -1, singlePointColor = None, 
                                    matchesMask = None, flags = 2)
                    img3 = cv2.drawMatches(img1, keypoints1, img2, keypoints2, good, None, **draw_params)
                    cv2.imshow("image", img3)
                    cv2.waitKey(1)
                
                return q1, q2
        
        return None, None
            
    def get_pose(self, q1, q2):
        """
        Calculates the transformation matrix

        Parameters
        ----------
        q1 (ndarray): The good keypoints matches position in i-1'th image
        q2 (ndarray): The good keypoints matches position in i'th image

        Returns
        -------
        transformation_matrix (ndarray): The transformation matrix
        """

        Essential, mask = cv2.findEssentialMat(q1, q2, self.K)
        # print ("\nEssential matrix:\n" + str(Essential))

        # Decompose into rotation and translation
        R, t = self.decomp_essential_mat(Essential, q1, q2)

        return self._form_transf(R,np.squeeze(t))
    
    def decomp_essential_mat(self, E, q1, q2):
        """
        Decompose the Essential matrix

        Parameters
        ----------
        E (ndarray): Essential matrix
        q1 (ndarray): The good keypoints matches position in i-1'th image
        q2 (ndarray): The good keypoints matches position in i'th image

        Returns
        -------
        right_pair (list): Contains the rotation matrix and translation vector
        """


        R1, R2, t = cv2.decomposeEssentialMat(E)
        T1 = self._form_transf(R1,np.ndarray.flatten(t))
        T2 = self._form_transf(R2,np.ndarray.flatten(t))
        T3 = self._form_transf(R1,np.ndarray.flatten(-t))
        T4 = self._form_transf(R2,np.ndarray.flatten(-t))
        transformations = [T1, T2, T3, T4]
        
        # Homogenize K
        K = np.concatenate(( self.K, np.zeros((3,1)) ), axis = 1)

        # List of projections
        projections = [K @ T1, K @ T2, K @ T3, K @ T4]

        np.set_printoptions(suppress=True)


        positives = []
        for P, T in zip(projections, transformations):
            hom_Q1 = cv2.triangulatePoints(self.P, P, q1.T, q2.T)
            hom_Q2 = T @ hom_Q1
            # Un-homogenize
            Q1 = hom_Q1[:3, :] / hom_Q1[3, :]
            Q2 = hom_Q2[:3, :] / hom_Q2[3, :]  

            total_sum = sum(Q2[2, :] > 0) + sum(Q1[2, :] > 0)
            relative_scale = np.mean(np.linalg.norm(Q1.T[:-1] - Q1.T[1:], axis=-1)/
                                     np.linalg.norm(Q2.T[:-1] - Q2.T[1:], axis=-1))
            positives.append(total_sum + relative_scale)
            

        # Decompose the Essential matrix using built in OpenCV function
        # Form the 4 possible transformation matrix T from R1, R2, and t
        # Create projection matrix using each T, and triangulate points hom_Q1
        # Transform hom_Q1 to second camera using T to create hom_Q2
        # Count how many points in hom_Q1 and hom_Q2 with positive z value
        # Return R and t pair which resulted in the most points with positive z

        max = np.argmax(positives)
        if (max == 2):
            # print(-t)
            return R1, np.ndarray.flatten(-t)
        elif (max == 3):
            # print(-t)
            return R2, np.ndarray.flatten(-t)
        elif (max == 0):
            # print(t)
            return R1, np.ndarray.flatten(t)
        elif (max == 1):
            # print(t)
            return R2, np.ndarray.flatten(t)


intrinsic = pickle.load(open("cameraMatrix.pkl", "rb"))


vo = CameraPoses(intrinsic)

gt_path = []
estimated_path = []
camera_pose_list = []
start_pose = np.ones((3,4))
start_translation = np.zeros((3,1))
start_rotation = np.identity(3)
start_pose = np.concatenate((start_rotation, start_translation), axis=1)

cap = cv2.VideoCapture(0)

# check that camera opened succesfully
if cap.isOpened() == False:
    print("Error: Could not open camera")
    exit()

process_frames = False
old_frame = None
new_frame = None
frame_counter = 0

cur_pos = start_pose

while (cap.isOpened()):
    # caputre frame by frame
    ret, new_frame = cap.read()

    frame_counter += 1

    start = time.perf_counter()

    if process_frames and ret:
        q1, q2 = vo.get_matches(old_frame, new_frame)
        if q1 is not None:
            if len(q1) > 20 and len(q2) > 20:
                transf = vo.get_pose(q1, q2)
                cur_pos = cur_pos @ transf
            else:
                print("Not enough keypoints")
            
            hom_array = np.array([[0,0,0,1]])
            hom_camera_pose = np.concatenate((cur_pos, hom_array), axis=0)
            camera_pose_list.append(hom_camera_pose)
            estimated_path.append((cur_pos[0,3], cur_pos[2,3]))

            estimated_camera_pose_x, estimated_camera_pose_y = cur_pos[0,3], cur_pos[2,3]

    elif process_frames and ret is False:
        break

    old_frame = new_frame

    process_frames = True
    
    end = time.perf_counter()

    total_time = end - start
    fps = 1 / total_time

    cv2.putText(new_frame, f'FPS: {int(fps)}', (20,50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0,255,0), 2)

    cv2.putText(new_frame, str(np.round(cur_pos[0, 0],2)), (260,50), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0))
    cv2.putText(new_frame, str(np.round(cur_pos[0, 1],2)), (340,50), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0))
    cv2.putText(new_frame, str(np.round(cur_pos[0, 2],2)), (420,50), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0))
    cv2.putText(new_frame, str(np.round(cur_pos[1, 0],2)), (260,90), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0))
    cv2.putText(new_frame, str(np.round(cur_pos[1, 1],2)), (340,90), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0))
    cv2.putText(new_frame, str(np.round(cur_pos[1, 2],2)), (420,90), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0))
    cv2.putText(new_frame, str(np.round(cur_pos[2, 0],2)), (260,130), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0))
    cv2.putText(new_frame, str(np.round(cur_pos[2, 1],2)), (340,130), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0))
    cv2.putText(new_frame, str(np.round(cur_pos[2, 2],2)), (420,130), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0))
    
    cv2.putText(new_frame, str(np.round(cur_pos[0, 3],2)), (540,50), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0))
    cv2.putText(new_frame, str(np.round(cur_pos[1, 3],2)), (540,90), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0))
    cv2.putText(new_frame, str(np.round(cur_pos[2, 3],2)), (540,130), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0))

    cv2.imshow("img", new_frame)

    if cv2.waitKey(25) & 0xFF == ord('q'):
        break

cap.release()

number_of_frames = 20
image_size = np.array([1920, 1080])
plt.figure()
ax = plt.axes(projection= '3d')

camera_pose_poses = np.array(camera_pose_list)

key_frames_indices = np.linspace(0, len(camera_pose_poses) - 1, number_of_frames, dtype=int)
colors = cycle("rgb")

for i, c in zip(key_frames_indices, colors):
    pc.plot_camera(ax, camera_pose_poses[i],sensor_size=image_size, c=c)

plt.show()

take_every_th_camera_pose = 2
estimated_path = np.array(estimated_path[::take_every_th_camera_pose])

plt.plot(estimated_path[:,0], estimated_path[:,1], 'r')
plt.show()

